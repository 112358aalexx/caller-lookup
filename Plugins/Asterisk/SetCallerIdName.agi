#!/usr/bin/python3
#
# Usage:
#
#       exten => 12345,1,AGI(CallerLookup-SetCIDName.py [TRUNK_HOME_REGION, NAME_FORMAT])
#
#       ARGUMENTS    TRUNK_HOME_REGION    When CallerId does not contain country code
#                                         this region will be assumed.  Country Code in
#                                         CCN format.  For Example;
#
#                                                   "GB"
#
#                    NAME_FORMAT          Format the name based on the supplied string.
#                                         For example;
#
#                                                   "{name} ({country_name})"
#
#                                         Params;
#
#                                               name                John Smith
#                                               address             123 Fake Street, London, WC1 2CD
#                                               number_e164         +4912345678901
#                                               number_local        (012) 345 678901
#                                               region              DE
#                                               region_dial_code    49
#                                               score               7
#
#                                         Default Value:
#
#                                               "{name}"
#
# Author:       Scott Philip (sp@scottphilip.com)
# Source:       https://github.com/scottphilip/caller-lookup/
# Licence:      GNU GENERAL PUBLIC LICENSE (Version 3, 29 June 2007)
#               CallerLookup Copyright (C) 2017 SCOTT PHILIP
#               This program comes with ABSOLUTELY NO WARRANTY
#               This is free software, and you are welcome to redistribute it
#               under certain conditions
#               https://github.com/scottphilip/caller-lookup/blob/master/LICENSE.md

if __name__ == '__main__':

    import importlib.util
    spec = importlib.util.spec_from_file_location("CallerLookup", "/var/lib/CallerLookup/CallerLookup.py")
    CallerLookup = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(CallerLookup)

    import sys
    import asterisk

    try:

        agi = asterisk.agi()
        agi.verbose("CallerLookup=>SetCallerIdName")

        caller_id = agi.env["agi_callerid"] if "agi_callerid" in agi.env else None
        if caller_id is None:
            agi.verbose("Caller Id is not available")
            exit(0)

        default_region = agi.env["agi_arg_1"] if "agi_arg_1" in agi.env and not agi.env["agi_arg_1"] is None else None
        name_format = agi.env["agi_arg_2"] if "agi_arg_2" in agi.env and not agi.env["agi_arg_2"] is None else "{name}"

        if default_region is None:
            agi.verbose("Home Region is not set")

        caller_lookup = CallerLookup()
        result = caller_lookup.search(caller_id, default_region)

        result = caller_lookup.search(caller_id)

        if result is None or result["result"] != "success":
            exit(0)

        caller_name = name_format
        caller_name = caller_name.replace("{name}", result["name"] if "name" in result else "")
        caller_name = caller_name.replace("{address}", result["address"] if "address" in result else "")
        caller_name = caller_name.replace("{score}", result["score"] if "score" in result else "")
        caller_name = caller_name.replace("{number_e164}", result["number_e164"] if "number_e164" in result else "")
        caller_name = caller_name.replace("{number_national}", result["number_national"] if "number_national" in result else "")
        caller_name = caller_name.replace("{region_dial_code}", result["region_dial_code"] if "region_dial_code" in result else "")
        caller_name = caller_name.replace("{region}", result["region"] if "region" in result else "")

        agi.env["agi_calleridname"] = caller_name

        exit(0)

    except Exception as e:

        sys.stderr.write("Caught Exception {}".format(str(e)))
        exit(1)
