<?php
//
// Author:       Scott Philip (sp@scottphilip.com)
// Source:       https://github.com/scottphilip/caller-lookup/
// Licence:      GNU GENERAL PUBLIC LICENSE (Version 3, 29 June 2007)
//               CallerLookup Copyright (C) 2017 SCOTT PHILIP
//               This program comes with ABSOLUTELY NO WARRANTY
//               This is free software, and you are welcome to redistribute it
//               under certain conditions
//               https://github.com/scottphilip/caller-lookup/blob/master/LICENSE.md
//
class CallerLookup extends superfecta_base
{
    private $ccn_codes = array(
        1 => "af",
        2 => "al",
        3 => "dz",
        4 => "as",
        5 => "ad",
        6 => "ao",
        7 => "ai",
        8 => "ag",
        9 => "ar",
        10 => "am",
        11 => "aw",
        12 => "au",
        13 => "at",
        14 => "az",
        15 => "bs",
        16 => "bh",
        17 => "bd",
        18 => "bb",
        19 => "by",
        20 => "be",
        21 => "bz",
        22 => "bj",
        23 => "bm",
        24 => "bt",
        25 => "bo",
        26 => "ba",
        27 => "bw",
        28 => "br",
        29 => "io",
        30 => "vg",
        31 => "bn",
        32 => "bg",
        33 => "bf",
        34 => "mm",
        35 => "bi",
        36 => "kh",
        37 => "cm",
        38 => "ca",
        39 => "cv",
        40 => "ky",
        41 => "cf",
        42 => "td",
        43 => "cl",
        44 => "CN",
        45 => "cx",
        46 => "co",
        47 => "km",
        48 => "cg",
        49 => "cd",
        50 => "ck",
        51 => "cr",
        52 => "hr",
        53 => "cu",
        54 => "cy",
        55 => "cz",
        56 => "dk",
        57 => "dj",
        58 => "dm",
        59 => "do",
        60 => "do",
        61 => "do",
        62 => "tl",
        63 => "ec",
        64 => "eg",
        65 => "sv",
        66 => "gq",
        67 => "er",
        68 => "ee",
        69 => "et",
        70 => "fo",
        71 => "fj",
        72 => "fi",
        73 => "fr",
        74 => "gf",
        75 => "pf",
        76 => "ga",
        77 => "gm",
        78 => "ge",
        79 => "de",
        80 => "gh",
        81 => "gi",
        82 => "gr",
        83 => "gl",
        84 => "gd",
        85 => "gp",
        86 => "gu",
        87 => "gt",
        88 => "gn",
        89 => "gw",
        90 => "gy",
        91 => "ht",
        92 => "hn",
        93 => "hk",
        94 => "hu",
        95 => "is",
        96 => "in",
        97 => "id",
        98 => "ir",
        99 => "iq",
        100 => "ie",
        101 => "il",
        102 => "it",
        103 => "ci",
        104 => "jm",
        105 => "jp",
        106 => "jo",
        107 => "kz",
        108 => "ke",
        109 => "ki",
        110 => "kw",
        111 => "kg",
        112 => "la",
        113 => "lv",
        114 => "lb",
        115 => "ls",
        116 => "lr",
        117 => "ly",
        118 => "li",
        119 => "lt",
        120 => "lu",
        121 => "mo",
        122 => "mk",
        123 => "mg",
        124 => "mw",
        125 => "my",
        126 => "mv",
        127 => "ml",
        128 => "mt",
        129 => "mh",
        130 => "mq",
        131 => "mr",
        132 => "mu",
        133 => "yt",
        134 => "mx",
        135 => "md",
        136 => "mc",
        137 => "mn",
        138 => "me",
        139 => "ms",
        140 => "ma",
        141 => "mz",
        142 => "na",
        143 => "nr",
        144 => "np",
        145 => "nl",
        146 => "cw",
        147 => "nc",
        148 => "nz",
        149 => "ni",
        150 => "ne",
        151 => "ng",
        152 => "nu",
        153 => "nf",
        154 => "mp",
        155 => "kp",
        156 => "no",
        157 => "om",
        158 => "pk",
        159 => "pw",
        160 => "ps",
        161 => "pa",
        162 => "pg",
        163 => "py",
        164 => "pe",
        165 => "ph",
        166 => "pn",
        167 => "pl",
        168 => "pt",
        169 => "pr",
        170 => "qa",
        171 => "re",
        172 => "ro",
        173 => "ru",
        174 => "rw",
        175 => "sh",
        176 => "kn",
        177 => "lc",
        178 => "mf",
        179 => "pm",
        180 => "vc",
        181 => "ws",
        182 => "sm",
        183 => "st",
        184 => "sa",
        185 => "sn",
        186 => "rs",
        187 => "sc",
        188 => "fk",
        189 => "sl",
        190 => "sg",
        191 => "sk",
        192 => "si",
        193 => "sb",
        194 => "so",
        195 => "za",
        196 => "kr",
        197 => "ss",
        198 => "es",
        199 => "lk",
        200 => "sd",
        201 => "sr",
        202 => "sz",
        203 => "se",
        204 => "ch",
        205 => "sy",
        206 => "tw",
        207 => "tj",
        208 => "tz",
        209 => "th",
        210 => "tg",
        211 => "tk",
        212 => "to",
        213 => "tt",
        214 => "tn",
        215 => "tr",
        216 => "tm",
        217 => "tc",
        218 => "tv",
        219 => "ug",
        220 => "gb",
        221 => "ua",
        222 => "ae",
        223 => "uy",
        224 => "us",
        225 => "uz",
        226 => "vu",
        227 => "ve",
        228 => "vn",
        229 => "vi",
        230 => "wf",
        231 => "ye",
        232 => "zm",
        233 => "zw"
    );

    public $description = "CallerLookup (TrueCaller)";
    public $version_requirement = "2.11";
    public $source_param = array(
        'AccountInfo' => array(
          'default' => "<h4>Google Account Credentials:</h4><input type='hidden' id='AccountInfo' name='AccountInfo' value='internal' />",
          'type' => 'info'
        ),
        'Google_Username' => array(
          'description' => "Google Email",
          'type' => 'text'
        ),
        'Google_Password' => array(
          'description' => "Google Password",
          'type' => 'password'
        ),
        'Google_OTP_Secret' => array(
          'description' => "Google Dual-Factor Secret",
          'type' => 'text'
        ),
        'Default_Region' => array(
          'description' => "Default Country CCN",
          'type' => 'select',
          'default' => 79,
          'option' => array(
                1 => "Afghanistan (+93)",
                2 => "Albania (+355)",
                3 => "Algeria (+213)",
                4 => "American Samoa (+1684)",
                5 => "Andorra (+376)",
                6 => "Angola (+244)",
                7 => "Anguilla (+1264)",
                8 => "Antigua and Barbuda (+1268)",
                9 => "Argentina (+54)",
                10 => "Armenia (+374)",
                11 => "Aruba (+297)",
                12 => "Australia (+61)",
                13 => "Austria (+43)",
                14 => "Azerbaijan (+994)",
                15 => "Bahamas (+1242)",
                16 => "Bahrain (+973)",
                17 => "Bangladesh (+880)",
                18 => "Barbados (+1246)",
                19 => "Belarus (+375)",
                20 => "Belgium (+32)",
                21 => "Belize (+501)",
                22 => "Benin (+229)",
                23 => "Bermuda (+1441)",
                24 => "Bhutan (+975)",
                25 => "Bolivia (+591)",
                26 => "Bosnia and Herzegovina (+387)",
                27 => "Botswana (+267)",
                28 => "Brazil (+55)",
                29 => "British Indian Ocean Territory (+246)",
                30 => "British Virgin Islands (+1284)",
                31 => "Brunei (+673)",
                32 => "Bulgaria (+359)",
                33 => "Burkina Faso (+226)",
                34 => "Burma-Myanmar (+95)",
                35 => "Burundi (+257)",
                36 => "Cambodia (+855)",
                37 => "Cameroon (+237)",
                38 => "Canada (+1)",
                39 => "Cape Verde (+238)",
                40 => "Cayman Islands (+1345)",
                41 => "Central African Republic (+236)",
                42 => "Chad (+235)",
                43 => "Chile (+56)",
                44 => "China (+86)",
                45 => "Christmas Island (+6189)",
                46 => "Colombia (+57)",
                47 => "Comoros (+269)",
                48 => "Congo (+242)",
                49 => "Congo The Democratic Republic (+243)",
                50 => "Cook Islands (+682)",
                51 => "Costa Rica (+506)",
                52 => "Croatia (+385)",
                53 => "Cuba (+53)",
                54 => "Cyprus (+357)",
                55 => "Czech Republic (+420)",
                56 => "Denmark (+45)",
                57 => "Djibouti (+253)",
                58 => "Dominica (+1767)",
                59 => "Dominican Republic (+1849)",
                60 => "Dominican Republic (+1829)",
                61 => "Dominican Republic (+1809)",
                62 => "East Timor (+670)",
                63 => "Ecuador (+593)",
                64 => "Egypt (+20)",
                65 => "El Salvador (+503)",
                66 => "Equatorial Guinea (+240)",
                67 => "Eritrea (+291)",
                68 => "Estonia (+372)",
                69 => "Ethiopia (+251)",
                70 => "Faroe Islands (+298)",
                71 => "Fiji (+679)",
                72 => "Finland (+358)",
                73 => "France (+33)",
                74 => "French Guiana (+594)",
                75 => "French Polynesia (+689)",
                76 => "Gabon (+241)",
                77 => "Gambia (+220)",
                78 => "Georgia (+995)",
                79 => "Germany (+49)",
                80 => "Ghana (+233)",
                81 => "Gibraltar (+350)",
                82 => "Greece (+30)",
                83 => "Greenland (+299)",
                84 => "Grenada (+1473)",
                85 => "Guadeloupe (+590)",
                86 => "Guam (+1671)",
                87 => "Guatemala (+502)",
                88 => "Guinea (+224)",
                89 => "Guinea-Bissau (+245)",
                90 => "Guyana (+592)",
                91 => "Haiti (+509)",
                92 => "Honduras (+504)",
                93 => "Hong Kong (+852)",
                94 => "Hungary (+36)",
                95 => "Iceland (+354)",
                96 => "India (+91)",
                97 => "Indonesia (+62)",
                98 => "Iran (+98)",
                99 => "Iraq (+964)",
                100 => "Ireland (+353)",
                101 => "Israel (+972)",
                102 => "Italy (+39)",
                103 => "Ivory Coast (+225)",
                104 => "Jamaica (+1876)",
                105 => "Japan (+81)",
                106 => "Jordan (+962)",
                107 => "Kazakhstan (+7)",
                108 => "Kenya (+254)",
                109 => "Kiribati (+686)",
                110 => "Kuwait (+965)",
                111 => "Kyrgyzstan (+996)",
                112 => "Laos (+856)",
                113 => "Latvia (+371)",
                114 => "Lebanon (+961)",
                115 => "Lesotho (+266)",
                116 => "Liberia (+231)",
                117 => "Libya (+218)",
                118 => "Liechtenstein (+423)",
                119 => "Lithuania (+370)",
                120 => "Luxembourg (+352)",
                121 => "Macau (+853)",
                122 => "Macedonia (+389)",
                123 => "Madagascar (+261)",
                124 => "Malawi (+265)",
                125 => "Malaysia (+60)",
                126 => "Maldives (+960)",
                127 => "Mali (+223)",
                128 => "Malta (+356)",
                129 => "Marshall Islands (+692)",
                130 => "Martinique (+596)",
                131 => "Mauritania (+222)",
                132 => "Mauritius (+230)",
                133 => "Mayotte (+262)",
                134 => "Mexico (+52)",
                135 => "Moldova (+373)",
                136 => "Monaco (+377)",
                137 => "Mongolia (+976)",
                138 => "Montenegro (+382)",
                139 => "Montserrat (+1664)",
                140 => "Morocco (+212)",
                141 => "Mozambique (+258)",
                142 => "Namibia (+264)",
                143 => "Nauru (+674)",
                144 => "Nepal (+977)",
                145 => "Netherlands (+31)",
                146 => "CuraÃ§ao (+599)",
                147 => "New Caledonia (+687)",
                148 => "New Zealand (+64)",
                149 => "Nicaragua (+505)",
                150 => "Niger (+227)",
                151 => "Nigeria (+234)",
                152 => "Niue (+683)",
                153 => "Norfolk Island (+672)",
                154 => "Northern Mariana Islands (+1670)",
                155 => "North Korea (+850)",
                156 => "Norway (+47)",
                157 => "Oman (+968)",
                158 => "Pakistan (+92)",
                159 => "Palau (+680)",
                160 => "Palestine (+970)",
                161 => "Panama (+507)",
                162 => "Papua New Guinea (+675)",
                163 => "Paraguay (+595)",
                164 => "Peru (+51)",
                165 => "Philippines (+63)",
                166 => "Pitcairn Islands (+870)",
                167 => "Poland (+48)",
                168 => "Portugal (+351)",
                169 => "Puerto Rico (+1787)",
                170 => "Qatar (+974)",
                171 => "RÃ©union (+262)",
                172 => "Romania (+40)",
                173 => "Russia (+7)",
                174 => "Rwanda (+250)",
                175 => "Saint Helena (+290)",
                176 => "Saint Kitts and Nevis (+1869)",
                177 => "Saint Lucia (+1758)",
                178 => "Saint Martin (+1599)",
                179 => "Saint Pierre and Miquelon (+508)",
                180 => "Saint Vincent and the Grenadines (+1784)",
                181 => "Samoa (+685)",
                182 => "San Marino (+378)",
                183 => "SÃ£o TomÃ© and PrÃ­ncipe (+239)",
                184 => "Saudi Arabia (+966)",
                185 => "Senegal (+221)",
                186 => "Serbia (+381)",
                187 => "Seychelles (+248)",
                188 => "Falkland Islands (+500)",
                189 => "Sierra Leone (+232)",
                190 => "Singapore (+65)",
                191 => "Slovakia (+421)",
                192 => "Slovenia (+386)",
                193 => "Solomon Islands (+677)",
                194 => "Somalia (+252)",
                195 => "South Africa (+27)",
                196 => "South Korea (+82)",
                197 => "South Sudan (+211)",
                198 => "Spain (+34)",
                199 => "Sri Lanka (+94)",
                200 => "Sudan (+249)",
                201 => "Suriname (+597)",
                202 => "Swaziland (+268)",
                203 => "Sweden (+46)",
                204 => "Switzerland (+41)",
                205 => "Syria (+963)",
                206 => "Taiwan (+886)",
                207 => "Tajikistan (+992)",
                208 => "Tanzania (+255)",
                209 => "Thailand (+66)",
                210 => "Togo (+228)",
                211 => "Tokelau (+690)",
                212 => "Tonga (+676)",
                213 => "Trinidad and Tobago (+1868)",
                214 => "Tunisia (+216)",
                215 => "Turkey (+90)",
                216 => "Turkmenistan (+993)",
                217 => "Turks and Caicos Islands (+1649)",
                218 => "Tuvalu (+688)",
                219 => "Uganda (+256)",
                220 => "United Kingdom (+44)",
                221 => "Ukraine (+380)",
                222 => "United Arab Emirates (+971)",
                223 => "Uruguay (+598)",
                224 => "United States (+1)",
                225 => "Uzbekistan (+998)",
                226 => "Vanuatu (+678)",
                227 => "Venezuela (+58)",
                228 => "Vietnam (+84)",
                229 => "Virgin Islands (+1340)",
                230 => "Wallis and Futuna (+681)",
                231 => "Yemen (+967)",
                232 => "Zambia (+260)",
                233 => "Zimbabwe (+263)"
            )
        ),
        'ScoreInfo' => array(
          'default' => "<h3>Spam Management</h3><h5>Each identified number has a credibility score associated with it.  The higher the score, the less likely it is a Spam call.</h5><input type='hidden' id='ScoreInfo' name='ScoreInfo' value='internal' />",
          'type' => 'info'
        ),
        'Spam_Threshold' => array(
        'description' => "Mark calls as Spam if their score is below:",
        'type' => 'select',
        'option' => array(
                1 => "Never",
                2 => "10%",
                3 => "20%",
                4 => "30% (Recommended)",
                5 => "40%",
                6 => "50%",
                7 => "60%",
                8 => "70%",
                9 => "80%",
                10 => "90%"
            ),
            'default' => '4'
        ),
        'SaveInfo' => array(
          'default' => "<h3>Save Idenfied Callers</h3><input type='hidden' id='SaveInfo' name='SaveInfo' value='internal' />",
          'type' => 'info'
        ),
        'Add_to_Phonebook' => array(
        'description' => "Add Names to Asterisk Phonebook? (When not marked as Spam)",
        'type' => 'select',
        'option' => array(
                1 => "No",
                2 => "Yes"
            ),
            'default' => '1'
        ),
        'Add_to_Blacklist' => array(
        'description' => "Add Spam Calls to Asterisk Blacklist?",
        'type' => 'select',
        'option' => array(
                1 => "No",
                2 => "Yes"
            ),
            'default' => '1'
        )
    );

    function get_caller_id($thenumber, $run_param=array())
    {
        $this->spam = false;
        $is_debug = $this->debug;
        $result_name = NULL;
        $is_add_phonebook = False;
        $is_add_blacklist = False;

        $username = (string)$run_param['Google_Username'];
        $password = (string)$run_param['Google_Password'];
        $otpsecret = (string)$run_param['Google_OTP_Secret'];
        $default_region = $this->ccn_codes[$run_param['Default_Region']];
        $spam_threshold = $run_param['Spam_Threshold'] == 1 ? 0 : (($run_param['Spam_Threshold'] - 1) * 10);
        $this->DebugPrint(sprintf("CallerLookup: Username -> %s", $username));
        $this->DebugPrint(sprintf("CallerLookup: Default Region -> %s", $default_region));
        $this->DebugPrint(sprintf("CallerLookup: Threshold -> %s", $spam_threshold));

        if ($run_param['Add_to_Phonebook'] == 2)
        {
            $this->DebugPrint("CallerLookup: Add Phonebook");
            $is_add_phonebook = True;
        }

        if ($run_param['Add_to_Blacklist'] == 2)
        {
            $this->DebugPrint("CallerLookup: Add Blacklist");
            $is_add_blacklist = True;
        }

        $script_path = '/var/lib/CallerLookup/CallerLookup.py';

        $credentials = "";
        if (trim($username))
        {
            $credentials = sprintf(" --username %s --password %s --otpsecret %s", $username, $password, $otpsecret);
        }

        $command = sprintf("python3.6 %s --number %s --region %s%s",
                        $script_path,
                        $thenumber,
                        $default_region,
                        $credentials);
        if ($this->debug)
        {
            $command .= " --debug";
        }

        try
        {
            $result = exec($command, $output, $return_var);
            $result_utf = utf8_decode($result);
        }
        catch (Exception $e)
        {
            $this->DebugPrint(sprintf("CallerLookup: Execution Error -> %s", $e->getMessage()));
        }

        if ($return_var == 0)
        {
            $results = json_decode($result_utf, true);

            if (sizeof($results) > 0)
            {
                $result = $results[0];

                if (isset($result['result']))
                {
                    $result_value = $result['result'];

                    if ($result_value == "success")
                    {
                        if ($result['score'] >= 0)
                        {
                            $this->DebugPrint("CallerLookup: Score = ".$result['score']);

                            if ($result['score'] < $spam_threshold)
                            {
                                $this->DebugPrint("CallerLookup: Score is below threshold of ".$spam_threshold."%.  Marking call as spam.");
                                $this->spam = true;
                            }
                        }

                        if (trim($result['name']))
                        {
                            $result_name = $result['name'];
                        }

                        if ($this->spam)
                        {
                            if ($is_add_blacklist)
                            {
                                if (is_null($result_name))
                                {
                                    $result_name = "SPAM";
                                }
                                $result_name = $result_name." (Score: ".$result['score']."%)"
                                $this->DebugPrint("CallerLookup: Blacklist - $result_name ($thenumber)");
                                $this->save_db_entry('blacklist', trim($thenumber), trim($result_name));
                            }
                        }
                        else
                        {
                            if ($is_add_phonebook && !is_null($result_name))
                            {
                                $this->DebugPrint("CallerLookup: Phonebook - $result_name ($thenumber)");
                                $this->save_db_entry('cidname', trim($thenumber), trim($result_name));
                            }
                        }
                    }
                    else if ($result_value == "invalid_number")
                    {
                        $result_name = "Invalid Number";
                    }
                }
            }
        }
        return is_null($result_name) ? "" : $result_name;
    }

    function save_db_entry($db, $key, $value)
    {
        if ($this->astman)
        {
            if (!$this->astman->database_get($db,$key))
            {
                $this->astman->database_put($db, $key, $value);
            }
        }
    }
}

?>